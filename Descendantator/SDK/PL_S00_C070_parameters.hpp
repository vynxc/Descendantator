#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PL_S00_C070

#include "Basic.hpp"


namespace SDK::Params
{

// Function PL_S00_C070.PL_S00_C070_DirectorBP_C.AJax_Event
// 0x0008 (0x0008 - 0x0000)
struct PL_S00_C070_DirectorBP_C_AJax_Event final
{
public:
	class AAJax_C*                                Ajax;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PL_S00_C070_DirectorBP_C_AJax_Event) == 0x000008, "Wrong alignment on PL_S00_C070_DirectorBP_C_AJax_Event");
static_assert(sizeof(PL_S00_C070_DirectorBP_C_AJax_Event) == 0x000008, "Wrong size on PL_S00_C070_DirectorBP_C_AJax_Event");
static_assert(offsetof(PL_S00_C070_DirectorBP_C_AJax_Event, Ajax) == 0x000000, "Member 'PL_S00_C070_DirectorBP_C_AJax_Event::Ajax' has a wrong offset!");

// Function PL_S00_C070.PL_S00_C070_DirectorBP_C.ExecuteUbergraph_PL_S00_C070_DirectorBP
// 0x0020 (0x0020 - 0x0000)
struct PL_S00_C070_DirectorBP_C_ExecuteUbergraph_PL_S00_C070_DirectorBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AViessa_C*                              K2Node_CustomEvent_Viessa;                         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ALepic_C*                               K2Node_CustomEvent_Lepic;                          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAJax_C*                                K2Node_CustomEvent_AJax;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PL_S00_C070_DirectorBP_C_ExecuteUbergraph_PL_S00_C070_DirectorBP) == 0x000008, "Wrong alignment on PL_S00_C070_DirectorBP_C_ExecuteUbergraph_PL_S00_C070_DirectorBP");
static_assert(sizeof(PL_S00_C070_DirectorBP_C_ExecuteUbergraph_PL_S00_C070_DirectorBP) == 0x000020, "Wrong size on PL_S00_C070_DirectorBP_C_ExecuteUbergraph_PL_S00_C070_DirectorBP");
static_assert(offsetof(PL_S00_C070_DirectorBP_C_ExecuteUbergraph_PL_S00_C070_DirectorBP, EntryPoint) == 0x000000, "Member 'PL_S00_C070_DirectorBP_C_ExecuteUbergraph_PL_S00_C070_DirectorBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(PL_S00_C070_DirectorBP_C_ExecuteUbergraph_PL_S00_C070_DirectorBP, K2Node_CustomEvent_Viessa) == 0x000008, "Member 'PL_S00_C070_DirectorBP_C_ExecuteUbergraph_PL_S00_C070_DirectorBP::K2Node_CustomEvent_Viessa' has a wrong offset!");
static_assert(offsetof(PL_S00_C070_DirectorBP_C_ExecuteUbergraph_PL_S00_C070_DirectorBP, K2Node_CustomEvent_Lepic) == 0x000010, "Member 'PL_S00_C070_DirectorBP_C_ExecuteUbergraph_PL_S00_C070_DirectorBP::K2Node_CustomEvent_Lepic' has a wrong offset!");
static_assert(offsetof(PL_S00_C070_DirectorBP_C_ExecuteUbergraph_PL_S00_C070_DirectorBP, K2Node_CustomEvent_AJax) == 0x000018, "Member 'PL_S00_C070_DirectorBP_C_ExecuteUbergraph_PL_S00_C070_DirectorBP::K2Node_CustomEvent_AJax' has a wrong offset!");

// Function PL_S00_C070.PL_S00_C070_DirectorBP_C.Lepic_Event
// 0x0008 (0x0008 - 0x0000)
struct PL_S00_C070_DirectorBP_C_Lepic_Event final
{
public:
	class ALepic_C*                               Lepic;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PL_S00_C070_DirectorBP_C_Lepic_Event) == 0x000008, "Wrong alignment on PL_S00_C070_DirectorBP_C_Lepic_Event");
static_assert(sizeof(PL_S00_C070_DirectorBP_C_Lepic_Event) == 0x000008, "Wrong size on PL_S00_C070_DirectorBP_C_Lepic_Event");
static_assert(offsetof(PL_S00_C070_DirectorBP_C_Lepic_Event, Lepic) == 0x000000, "Member 'PL_S00_C070_DirectorBP_C_Lepic_Event::Lepic' has a wrong offset!");

// Function PL_S00_C070.PL_S00_C070_DirectorBP_C.SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP
// 0x0008 (0x0008 - 0x0000)
struct PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP final
{
public:
	class ALepic_C*                               Lepic;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP) == 0x000008, "Wrong alignment on PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP");
static_assert(sizeof(PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP) == 0x000008, "Wrong size on PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP");
static_assert(offsetof(PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP, Lepic) == 0x000000, "Member 'PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP::Lepic' has a wrong offset!");

// Function PL_S00_C070.PL_S00_C070_DirectorBP_C.SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_0
// 0x0008 (0x0008 - 0x0000)
struct PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_0 final
{
public:
	class AAJax_C*                                Ajax;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_0) == 0x000008, "Wrong alignment on PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_0");
static_assert(sizeof(PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_0) == 0x000008, "Wrong size on PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_0");
static_assert(offsetof(PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_0, Ajax) == 0x000000, "Member 'PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_0::Ajax' has a wrong offset!");

// Function PL_S00_C070.PL_S00_C070_DirectorBP_C.SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_1
// 0x0008 (0x0008 - 0x0000)
struct PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_1 final
{
public:
	class AViessa_C*                              Viessa;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_1) == 0x000008, "Wrong alignment on PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_1");
static_assert(sizeof(PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_1) == 0x000008, "Wrong size on PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_1");
static_assert(offsetof(PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_1, Viessa) == 0x000000, "Member 'PL_S00_C070_DirectorBP_C_SequenceEvent__ENTRYPOINTPL_S00_C070_DirectorBP_1::Viessa' has a wrong offset!");

// Function PL_S00_C070.PL_S00_C070_DirectorBP_C.Viessa_Event
// 0x0008 (0x0008 - 0x0000)
struct PL_S00_C070_DirectorBP_C_Viessa_Event final
{
public:
	class AViessa_C*                              Viessa;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PL_S00_C070_DirectorBP_C_Viessa_Event) == 0x000008, "Wrong alignment on PL_S00_C070_DirectorBP_C_Viessa_Event");
static_assert(sizeof(PL_S00_C070_DirectorBP_C_Viessa_Event) == 0x000008, "Wrong size on PL_S00_C070_DirectorBP_C_Viessa_Event");
static_assert(offsetof(PL_S00_C070_DirectorBP_C_Viessa_Event, Viessa) == 0x000000, "Member 'PL_S00_C070_DirectorBP_C_Viessa_Event::Viessa' has a wrong offset!");

}

