#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Sec_PC_002_A_VAR_BODY_000

#include "Basic.hpp"

#include "M1_structs.hpp"
#include "M1AnimPhys_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass BP_Sec_PC_002_A_VAR_BODY_000.BP_Sec_PC_002_A_VAR_BODY_000_C
// 0x4660 (0x4980 - 0x0320)
class UBP_Sec_PC_002_A_VAR_BODY_000_C final : public UAnimInstance
{
public:
	uint8                                         Pad_318[0x8];                                      // 0x0318(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0328(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0330(0x0008)()
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_17;                       // 0x0340(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_16;                       // 0x0710(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_15;                       // 0x0AE0(0x03D0)()
	struct FM1AnimNode_ApplyFacialAdditive        M1AnimGraphNode_ApplyFacialAdditive;               // 0x0EB0(0x0098)()
	uint8                                         Pad_F48[0x8];                                      // 0x0F48(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_14;                       // 0x0F50(0x03D0)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x1320(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x1340(0x00C8)()
	uint8                                         Pad_1408[0x8];                                     // 0x1408(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_13;                       // 0x1410(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_12;                       // 0x17E0(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_11;                       // 0x1BB0(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_10;                       // 0x1F80(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_9;                        // 0x2350(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_8;                        // 0x2720(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_7;                        // 0x2AF0(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_6;                        // 0x2EC0(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_5;                        // 0x3290(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_4;                        // 0x3660(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_3;                        // 0x3A30(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_2;                        // 0x3E00(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys_1;                        // 0x41D0(0x03D0)()
	struct FM1AnimNode_AnimPhys                   M1AnimGraphNode_AnimPhys;                          // 0x45A0(0x03D0)()
	double                                        KawaiiAlpha;                                       // 0x4970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(const struct FPoseLink& InPose, struct FPoseLink* AnimGraph_0);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void ExecuteUbergraph_BP_Sec_PC_002_A_VAR_BODY_000(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Sec_PC_002_A_VAR_BODY_000_C">();
	}
	static class UBP_Sec_PC_002_A_VAR_BODY_000_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Sec_PC_002_A_VAR_BODY_000_C>();
	}
};
static_assert(alignof(UBP_Sec_PC_002_A_VAR_BODY_000_C) == 0x000010, "Wrong alignment on UBP_Sec_PC_002_A_VAR_BODY_000_C");
static_assert(sizeof(UBP_Sec_PC_002_A_VAR_BODY_000_C) == 0x004980, "Wrong size on UBP_Sec_PC_002_A_VAR_BODY_000_C");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, UberGraphFrame) == 0x000320, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, AnimBlueprintExtension_PropertyAccess) == 0x000328, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, AnimBlueprintExtension_Base) == 0x000330, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_17) == 0x000340, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_17' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_16) == 0x000710, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_16' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_15) == 0x000AE0, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_15' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_ApplyFacialAdditive) == 0x000EB0, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_ApplyFacialAdditive' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_14) == 0x000F50, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_14' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, AnimGraphNode_Root) == 0x001320, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, AnimGraphNode_LinkedInputPose) == 0x001340, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_13) == 0x001410, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_13' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_12) == 0x0017E0, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_12' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_11) == 0x001BB0, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_11' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_10) == 0x001F80, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_10' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_9) == 0x002350, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_9' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_8) == 0x002720, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_8' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_7) == 0x002AF0, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_7' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_6) == 0x002EC0, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_6' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_5) == 0x003290, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_5' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_4) == 0x003660, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_4' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_3) == 0x003A30, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_3' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_2) == 0x003E00, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_2' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys_1) == 0x0041D0, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys_1' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, M1AnimGraphNode_AnimPhys) == 0x0045A0, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::M1AnimGraphNode_AnimPhys' has a wrong offset!");
static_assert(offsetof(UBP_Sec_PC_002_A_VAR_BODY_000_C, KawaiiAlpha) == 0x004970, "Member 'UBP_Sec_PC_002_A_VAR_BODY_000_C::KawaiiAlpha' has a wrong offset!");

}

